import boto3
import time

cloudformation = boto3.client('cloudformation')

def get_valid_stacks():
    """Retrieve all CloudFormation stacks that are not in DELETE_COMPLETE or ROLLBACK_COMPLETE state."""
    stacks = []
    paginator = cloudformation.get_paginator('list_stacks')
    for page in paginator.paginate(StackStatusFilter=[
        'CREATE_COMPLETE', 'UPDATE_COMPLETE'
    ]):  # Removed ROLLBACK_COMPLETE stacks
        stacks.extend(page['StackSummaries'])
    
    return [stack['StackName'] for stack in stacks]

def detect_stack_drift(stack_name):
    """Check drift status and start detection only if necessary."""
    stack_info = cloudformation.describe_stacks(StackName=stack_name)['Stacks'][0]
    drift_info = stack_info.get('DriftInformation', {})
    drift_status = drift_info.get('StackDriftStatus', 'UNKNOWN')

    if drift_status == "DETECTION_IN_PROGRESS":
        print(f"Drift detection already in progress for {stack_name}. Waiting...")
        while True:
            time.sleep(5)  # Reduced sleep time
            stack_info = cloudformation.describe_stacks(StackName=stack_name)['Stacks'][0]
            drift_status = stack_info.get('DriftInformation', {}).get('StackDriftStatus', 'UNKNOWN')
            if drift_status != "DETECTION_IN_PROGRESS":
                return drift_status

    if drift_status not in ["DRIFTED", "IN_SYNC"]:
        try:
            response = cloudformation.detect_stack_drift(StackName=stack_name)
            drift_detection_id = response['StackDriftDetectionId']

            # Wait for completion
            while True:
                time.sleep(5)  # Reduced sleep time
                stack_info = cloudformation.describe_stacks(StackName=stack_name)['Stacks'][0]
                drift_status = stack_info.get('DriftInformation', {}).get('StackDriftStatus', 'UNKNOWN')
                if drift_status != "DETECTION_IN_PROGRESS":
                    return drift_status
        except Exception as e:
            print(f"Error detecting drift for stack {stack_name}: {str(e)}")
            return None  # Don't print this in the final output

    return drift_status

def lambda_handler(event, context):
    """Lambda function to detect drift for all CloudFormation stacks."""
    stack_names = get_valid_stacks()

    for stack_name in stack_names:
        drift_status = detect_stack_drift(stack_name)

        # Print only if stack is IN_SYNC or DRIFTED
        if drift_status in ["IN_SYNC", "DRIFTED"]:
            print(f"CloudFormation Drift Status for {stack_name}: {drift_status}")

    return {
        'statusCode': 200,
        'body': 'Drift detection completed for valid stacks.'
    }
