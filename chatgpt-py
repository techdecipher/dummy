import boto3
import time

cloudformation = boto3.client('cloudformation')

def get_valid_stacks():
    """Retrieve all active stacks (excluding DELETE_COMPLETE and ROLLBACK_COMPLETE)."""
    stacks = []
    paginator = cloudformation.get_paginator('list_stacks')
    for page in paginator.paginate(StackStatusFilter=['CREATE_COMPLETE', 'UPDATE_COMPLETE']):  
        stacks.extend(page['StackSummaries'])
    
    return [stack['StackName'] for stack in stacks]

def monitor_drift_detection(drift_detection_id):
    """Monitor drift detection progress until completion."""
    while True:
        response = cloudformation.describe_stack_drift_detection_status(StackDriftDetectionId=drift_detection_id)
        detection_status = response['DetectionStatus']

        if detection_status == "DETECTION_COMPLETE":
            return response['StackDriftStatus']
        
        elif detection_status == "DETECTION_FAILED":
            print(f"‚ö†Ô∏è Drift detection failed: {response.get('DetectionStatusReason', 'Unknown reason')}")
            return "UNKNOWN"

        time.sleep(5)  # Reduce wait time for faster execution

def detect_stack_drift(stack_name):
    """Trigger drift detection and return updated status (only DRIFTED or IN_SYNC)."""
    try:
        response = cloudformation.detect_stack_drift(StackName=stack_name)
        drift_detection_id = response['StackDriftDetectionId']
        print(f"üîÑ Started drift detection for {stack_name}. Tracking progress...")

        return monitor_drift_detection(drift_detection_id)

    except Exception as e:
        print(f"‚ö†Ô∏è Error detecting drift for stack {stack_name}: {str(e)}")
        return None  # Skip printing for invalid stacks

def lambda_handler(event, context):
    """Lambda function to trigger drift detection and only print IN_SYNC or DRIFTED stacks."""
    stack_names = get_valid_stacks()

    for stack_name in stack_names:
        drift_status = detect_stack_drift(stack_name)

        # Print only if drift detection was successful
        if drift_status in ["IN_SYNC", "DRIFTED"]:
            print(f"‚úÖ CloudFormation Drift Status for {stack_name}: {drift_status}")

    return {
        'statusCode': 200,
        'body': 'Drift detection completed for all stacks.'
    }
