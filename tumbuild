version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.x
    commands:
      - echo "Installing jq for JSON processing"
      - sudo yum install jq -y

  build:
    commands:
      - echo "Starting the build phase"

      # Navigate to the correct directory
      - cd $CODEBUILD_SRC_DIR_source_artifactsDbr || exit 1
      

      # Extract task_id lines from the Python file
      - echo "Extracting tasks with task_id"
      - jobNames=$(grep -n "task_id='run_fdl_dbjob_" "fdl_dbjob_etl_model_job_fdm_GEV_DM_GPAS.py" || true)

      # Write task line numbers and task names into output.txt
      - echo "Parsing tasks and writing to output.txt"
      - |
        while IFS= read -r line
        do
          lineNumber=$(echo "$line" | cut -d: -f1)
          jobName=$(echo "$line" | cut -d: -f2- | sed "s/task_id='run_//" | sed "s/',//" | xargs)
          echo "$lineNumber $jobName" >> output.txt
        done <<< "$jobNames"

      # Process each task from output.txt
      - echo "Processing tasks from output.txt"
      - |
        while IFS= read -r entry
        do
          lineNumber=$(echo "$entry" | awk '{print $1}')
          task_name=$(echo "$entry" | awk '{print $2}')

          echo "Processing task_name: $task_name on line $lineNumber"

          # API call to fetch job details
          curl --request GET "url/api/2.1/jobs/list?name=${task_name}" --header "Authorization: Bearer token" > "apiresponse.json"

          # Extract job_id and job_name
          job_value=$(jq -r '.jobs[0].job_id // empty' "apiresponse.json")
          job_name=$(jq -r '.jobs[0].settings.name // empty' "apiresponse.json")

          echo "Job Value: $job_value"
          echo "Task Value: $job_name"

          # Update job_id in the Python file
          if [ "$task_name" == "$job_name" ]; then
              echo "Updating job_id for $task_name on line $lineNumber"
              awk -v lineNum="$lineNumber" -v jobVal="$job_value" '
              NR==lineNum+1 { sub(/job_id[[:space:]]*=.*/, "job_id=" jobVal ","); }
              { print }
              ' fdl_dbjob_etl_model_job_fdm_GEV_DM_GPAS.py > temp.py && mv temp.py fdl_dbjob_etl_model_job_fdm_GEV_DM_GPAS.py
          else
              echo "No match found for $task_name and $job_name"
          fi
        done < output.txt
        
      - echo "Final Python file content:"
      - cat fdl_dbjob_etl_model_job_fdm_GEV_DM_GPAS.py
  
